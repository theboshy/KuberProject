// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mcs/rpcserviceproto.proto

/*
Package mcs is a generated protocol buffer package.

It is generated from these files:
	mcs/rpcserviceproto.proto

It has these top-level messages:
	GCDRequest
	GCDResponse
	FileRequest
	FileResponse
*/
package mcs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// - Compute GCD msg
type GCDRequest struct {
	A uint64 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B uint64 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *GCDRequest) Reset()                    { *m = GCDRequest{} }
func (m *GCDRequest) String() string            { return proto.CompactTextString(m) }
func (*GCDRequest) ProtoMessage()               {}
func (*GCDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GCDRequest) GetA() uint64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *GCDRequest) GetB() uint64 {
	if m != nil {
		return m.B
	}
	return 0
}

type GCDResponse struct {
	Result uint64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *GCDResponse) Reset()                    { *m = GCDResponse{} }
func (m *GCDResponse) String() string            { return proto.CompactTextString(m) }
func (*GCDResponse) ProtoMessage()               {}
func (*GCDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GCDResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

// - File creator msg
type FileRequest struct {
	BinaryFile []byte `protobuf:"bytes,1,opt,name=binaryFile,proto3" json:"binaryFile,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	FileSize   int64  `protobuf:"varint,3,opt,name=fileSize" json:"fileSize,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileRequest) GetBinaryFile() []byte {
	if m != nil {
		return m.BinaryFile
	}
	return nil
}

func (m *FileRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileRequest) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type FileResponse struct {
	OutPath string `protobuf:"bytes,1,opt,name=outPath" json:"outPath,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *FileResponse) Reset()                    { *m = FileResponse{} }
func (m *FileResponse) String() string            { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()               {}
func (*FileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FileResponse) GetOutPath() string {
	if m != nil {
		return m.OutPath
	}
	return ""
}

func (m *FileResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GCDRequest)(nil), "mcs.GCDRequest")
	proto.RegisterType((*GCDResponse)(nil), "mcs.GCDResponse")
	proto.RegisterType((*FileRequest)(nil), "mcs.FileRequest")
	proto.RegisterType((*FileResponse)(nil), "mcs.FileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GCDService service

type GCDServiceClient interface {
	Compute(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error)
	SaveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type gCDServiceClient struct {
	cc *grpc.ClientConn
}

func NewGCDServiceClient(cc *grpc.ClientConn) GCDServiceClient {
	return &gCDServiceClient{cc}
}

func (c *gCDServiceClient) Compute(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error) {
	out := new(GCDResponse)
	err := grpc.Invoke(ctx, "/mcs.GCDService/Compute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCDServiceClient) SaveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := grpc.Invoke(ctx, "/mcs.GCDService/SaveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GCDService service

type GCDServiceServer interface {
	Compute(context.Context, *GCDRequest) (*GCDResponse, error)
	SaveFile(context.Context, *FileRequest) (*FileResponse, error)
}

func RegisterGCDServiceServer(s *grpc.Server, srv GCDServiceServer) {
	s.RegisterService(&_GCDService_serviceDesc, srv)
}

func _GCDService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCDServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcs.GCDService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCDServiceServer).Compute(ctx, req.(*GCDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCDService_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCDServiceServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcs.GCDService/SaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCDServiceServer).SaveFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GCDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcs.GCDService",
	HandlerType: (*GCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _GCDService_Compute_Handler,
		},
		{
			MethodName: "SaveFile",
			Handler:    _GCDService_SaveFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcs/rpcserviceproto.proto",
}

func init() { proto.RegisterFile("mcs/rpcserviceproto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0xbf, 0x7e, 0x95, 0xf9, 0x73, 0xa7, 0xa0, 0x66, 0x21, 0xb5, 0x0b, 0x19, 0x0a, 0x42,
	0x57, 0x15, 0xf5, 0x0d, 0x1c, 0xd1, 0x9d, 0x48, 0xfa, 0x04, 0x69, 0xb8, 0x6a, 0xa0, 0x99, 0xd4,
	0xdc, 0x74, 0x40, 0x9f, 0x5e, 0x9a, 0x34, 0x33, 0xdd, 0x04, 0x7e, 0xe7, 0xde, 0xe4, 0xe4, 0x1c,
	0xb8, 0xd6, 0x92, 0xee, 0x6c, 0x2f, 0x09, 0xed, 0x41, 0x49, 0xec, 0xad, 0x71, 0xa6, 0xf6, 0x27,
	0x4b, 0xb5, 0xa4, 0xb2, 0x02, 0x78, 0xdd, 0x3d, 0x73, 0xfc, 0x1e, 0x90, 0x1c, 0xcb, 0x20, 0x11,
	0x79, 0xb2, 0x4d, 0xaa, 0x33, 0x9e, 0x88, 0x91, 0xda, 0xfc, 0x7f, 0xa0, 0xb6, 0xbc, 0x85, 0x8d,
	0xdf, 0xa4, 0xde, 0xec, 0x09, 0xd9, 0x15, 0x2c, 0x2c, 0xd2, 0xd0, 0xb9, 0x69, 0x7f, 0xa2, 0x12,
	0x61, 0xf3, 0xa2, 0x3a, 0x8c, 0x2f, 0xde, 0x00, 0xb4, 0x6a, 0x2f, 0xec, 0xcf, 0x28, 0xfa, 0xd5,
	0x8c, 0xcf, 0x14, 0x56, 0xc0, 0xea, 0x43, 0x75, 0xf8, 0x26, 0x34, 0x7a, 0xab, 0x35, 0x3f, 0x72,
	0x9c, 0x35, 0xea, 0x17, 0xf3, 0x74, 0x9b, 0x54, 0x29, 0x3f, 0x72, 0xf9, 0x04, 0x59, 0xb0, 0x99,
	0xbe, 0x93, 0xc3, 0xd2, 0x0c, 0xee, 0x5d, 0xb8, 0x2f, 0x6f, 0xb2, 0xe6, 0x11, 0xc7, 0x89, 0x46,
	0x22, 0xf1, 0x19, 0x0d, 0x22, 0x3e, 0x18, 0x9f, 0xbd, 0x09, 0xcd, 0xb0, 0x1a, 0x96, 0x3b, 0xa3,
	0xfb, 0xc1, 0x21, 0x3b, 0xaf, 0xb5, 0xa4, 0xfa, 0xd4, 0x4b, 0x71, 0x71, 0x12, 0x82, 0x5f, 0xf9,
	0x8f, 0xdd, 0xc3, 0xaa, 0x11, 0x07, 0xf4, 0x29, 0xc2, 0x7c, 0x96, 0xbb, 0xb8, 0x9c, 0x29, 0xf1,
	0x4a, 0xbb, 0xf0, 0xc5, 0x3f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x18, 0x01, 0xaa, 0xbc, 0x95,
	0x01, 0x00, 0x00,
}
